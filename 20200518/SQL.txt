USE master;
GO
ALTER DATABASE Hotel SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
GO
DROP DATABASE Hotel;
CREATE DATABASE Hotel;
USE Hotel;
GO

CREATE TABLE [Hotel].[dbo].[login_account] (
	email VARCHAR(50) NOT NULL PRIMARY KEY,
	login_password VARCHAR (50) NOT NULL,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	passport VARCHAR(50) NOT NULL,
	gender VARCHAR(50) NOT NULL,
	phone_number VARCHAR(50) NOT NULL,
	question_one VARCHAR(50) NOT NULL,
	question_two VARCHAR(50) NOT NULL,
	question_three VARCHAR(50) NOT NULL,
	verify_code VARCHAR(50) NOT NULL,
	verify_code_start_time DATETIME NOT NULL,
	count_wrong INT NOT NULL,
	user_role VARCHAR(50) NOT NULL,
	user_status INT NOT NULL
);

INSERT INTO login_account VALUES ('jate.hotel@gmail.com', 'jateh0te!', 'Staff', 'JATE', '-', '-', '-', '-', '-', '-', '-', GETDATE(), 0, 'S', '1')

GO

CREATE TABLE [Hotel].[dbo].[inquiry_master] (
	issue_id INT NOT NULL IDENTITY PRIMARY KEY, 
	raise_person VARCHAR(50) NOT NULL,
	issue_subject VARCHAR(50) NOT NULL,
	issue_category VARCHAR(50) NOT NULL,
	create_date DATETIME NOT NULL,
	inquiry_status VARCHAR(50)
);

GO

CREATE TABLE [Hotel].[dbo].[inquiry_detail] (
	issue_id INT NOT NULL, 
	reply_person VARCHAR(50) NOT NULL,
	message_content VARCHAR(50) NOT NULL,
	reply_date DATETIME NOT NULL
	FOREIGN KEY (issue_id) REFERENCES inquiry_master (issue_id)
);

GO

CREATE TABLE [Hotel].[dbo].[room] (
	room_id INT NOT NULL IDENTITY PRIMARY KEY,
	room_type VARCHAR(50) NOT NULL,
	bed_type VARCHAR(50) NOT NULL,
	picture_path VARCHAR (254),
	max_occupancy VARCHAR(50) NOT NULL,
	room_size VARCHAR(50) NOT NULL,
	bath_tub VARCHAR(50) NOT NULL,
	internet VARCHAR(100) NOT NULL,
	smart_tv VARCHAR(50) NOT NULL,
	hair_deyer VARCHAR(50) NOT NULL,
	in_room_safe VARCHAR(50) NOT NULL,
	mini_fridge VARCHAR(100) NOT NULL,
	replenished VARCHAR(50) NOT NULL,
	house_keeping VARCHAR(50) NOT NULL,
	bed_sofa VARCHAR(100) NOT NULL,
	optional_breakfast VARCHAR(50) NOT NULL,
	designer_chair VARCHAR(50) NOT NULL,
	price_per_day INT NOT NULL,
	amount_of_room INT NOT NULL
);

INSERT INTO room VALUES ('Standard', 'King or Twin bed', 'images/Standard.jpg', '2 - 3 adults & 1 kid', '30 square metre', 'Not Provided', 'Complimentary Wi-Fi and wired internet at no cost', '42" Smart TV', 'Provided', 'Provided', 'Stocked with snacks, soft and alcoholic drinks', 'Daily', 'Twice a day', 'Upon request and subject to availability (surcharge will be applied)', 'Not Provided', 'Not Provided', 500, 50)
INSERT INTO room VALUES ('Deluxe', 'King or Twin bed', 'images/Deluxe.jpg', '2 - 3 adults & 1 kid', '40 square metre', 'Circular', 'Complimentary Wi-Fi and wired internet at no cost', '42" Smart TV', 'Provided', 'Provided', 'Stocked with snacks, soft and alcoholic drinks', 'Daily', 'Twice a day', 'Upon request and subject to availability (surcharge will be applied)', 'Not Provided', 'Not Provided', 700, 5)
INSERT INTO room VALUES ('Studio', 'King or Twin bed', 'images/Studio.jpg', '2 - 3 adults & 1 kid', '55 square metre', 'Circular', 'Complimentary Wi-Fi and wired internet at no cost', '42" Smart TV', 'Provided', 'Provided', 'Stocked with snacks, soft and alcoholic drinks', 'Daily', 'Twice a day', 'Upon request and subject to availability (surcharge will be applied)', 'Provided', 'Provided', 1000, 7)

GO

CREATE TABLE [Hotel].[dbo].[booking] (
	booking_id INT NOT NULL IDENTITY PRIMARY KEY, 
	booking_email VARCHAR(50) NOT NULL,
	standard_room_amount INT NOT NULL,
	deluxe_room_amount INT NOT NULL,
	studio_room_amount INT NOT NULL,
	bed_type VARCHAR(50) NOT NULL,
	check_in_date DATETIME NOT NULL,
	check_out_date DATETIME NOT NULL,
	price INT NOT NULL,
	remarks VARCHAR(50),
	credit_card VARCHAR(50) NOT NULL,
	create_time DATETIME NOT NULL,
	update_time DATETIME
);

GO

CREATE TABLE [Hotel].[dbo].[role_page] (
	user_role VARCHAR (50) NOT NULL,
	page_name VARCHAR (50) NOT NULL,
	display_name VARCHAR (50) NOT NULL,
	sort INT NOT NULL,
	page_status INT NOT NULL
);

INSERT INTO role_page VALUES ('C', 'Client_Home', 'Home', 1, 1)
INSERT INTO role_page VALUES ('C', 'Client_Booking', 'Room Booking', 2, 1)
INSERT INTO role_page VALUES ('C', 'Client_Booking_History', 'Booking History', 3, 1)
INSERT INTO role_page VALUES ('C', 'Client_Inquiry_History', 'Enquiry History', 4, 1)
INSERT INTO role_page VALUES ('S', 'Staff_Home', 'Home', 1, 1)
INSERT INTO role_page VALUES ('S', 'Handle_Booking', 'Handle Booking', 2, 1)
INSERT INTO role_page VALUES ('S', 'Handle_Inquiry', 'Handle Enquiry', 3, 1)
INSERT INTO role_page VALUES ('CS', 'Login', 'Logout', 99, 1)


GO

CREATE PROCEDURE sp_register @email nvarchar(50), @password nvarchar(50), @firstName nvarchar(50), 
								@lastName nvarchar(50), @passport nvarchar(50), 
								@gender nvarchar(50), @phoneNumber nvarchar(50),
								@questionOne nvarchar(50), @questionTwo nvarchar(50), @questionThree nvarchar(50), 
								@verifyCode nvarchar(50)
AS
IF ((SELECT COUNT(*) FROM login_account WHERE email = @email) = 0)
BEGIN
	INSERT INTO login_account VALUES (@email, @password, @firstName, @lastName, @passport, @gender, @phoneNumber, 
	@questionOne, @questionTwo, @questionThree, @verifyCode, GETDATE(), 0, 'C', 0);
END
ELSE
BEGIN
	IF ((SELECT user_status FROM login_account WHERE email = @email) = 0)
	BEGIN
		UPDATE login_account SET login_password = @password, first_name = @firstName, last_name = @lastName,
		passport = @passport, gender = @gender, phone_number = @phoneNumber,
		question_one = @questionOne, question_two = @questionTwo, question_three = @questionThree,
		verify_code = @verifyCode, verify_code_start_time = GETDATE()
		WHERE email = @email;
	END
END

GO

CREATE PROCEDURE sp_check_verify_code @email nvarchar(50), @verifyCode nvarchar(50), @flag nvarchar(50)
AS
IF (@flag = 1)
BEGIN
	IF ((SELECT COUNT(*) FROM login_account WHERE email = @email AND GETDATE() <= DATEADD(ss, 300, verify_code_start_time)) = 1)
	BEGIN
		UPDATE login_account SET email = email WHERE user_status = 999
	END
END
ELSE IF (@flag = 2)
BEGIN
	IF ((SELECT verify_code FROM login_account WHERE email = @email and user_status = 0) = @verifyCode)
	BEGIN
		UPDATE login_account SET user_status = 1 WHERE email = @email;
	END
END
ELSE
BEGIN
	IF ((SELECT verify_code FROM login_account WHERE email = @email and user_status = 0) = @verifyCode)
	BEGIN
		UPDATE login_account SET user_status = 1 WHERE email = @email;
	END
END

GO

CREATE PROCEDURE sp_login @email nvarchar(50), @verifyCode nvarchar(50), @flag nvarchar(50)
AS      
IF (@flag = 1)
BEGIN
	UPDATE login_account SET verify_code = @verifyCode, verify_code_start_time = GETDATE() WHERE email = @email
END
SELECT * FROM login_account WHERE email = @email

GO

CREATE PROCEDURE sp_lock_account @email nvarchar(50), @flag nvarchar(50)
AS    
IF (@flag = 1)
BEGIN
	UPDATE login_account SET count_wrong = count_wrong + 1 WHERE email = @email
END
ELSE IF (@flag = 2)
BEGIN
	UPDATE login_account SET count_wrong = count_wrong + 1, user_status = 2 WHERE email = @email
END
ELSE
BEGIN
	UPDATE login_account SET count_wrong = 0 WHERE email = @email
END 

GO

CREATE PROCEDURE sp_inquiry @id nvarchar(50), @email nvarchar(50), @subject nvarchar(50), @category nvarchar(50), @message nvarchar(50), @flag nvarchar(50)
AS
IF (@flag = 1)
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO inquiry_master VALUES (@email, @subject, @category, GETDATE(), 'P')
			INSERT INTO inquiry_detail VALUES ((SELECT TOP 1 issue_ID FROM inquiry_master ORDER BY issue_ID DESC), @email, @message, GETDATE())
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN
		RAISERROR ('Fail',16,1)
	END CATCH
END
ELSE IF (@flag = 2)
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO inquiry_detail VALUES (@id, @email, @message, GETDATE())
			UPDATE inquiry_master SET inquiry_status = 'P' WHERE issue_id = @id
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN
		RAISERROR ('Fail',16,1)
	END CATCH
END
ELSE IF (@flag = 3)
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO inquiry_detail VALUES (@id, @email, @message, GETDATE())
			UPDATE inquiry_master SET inquiry_status = 'R' WHERE issue_id = @id
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN
		RAISERROR ('Fail',16,1)
	END CATCH
END

GO

CREATE PROCEDURE sp_refresh_inquiry_master @email nvarchar(50), @status nvarchar(50), @flag nvarchar(50)
AS
IF (@flag = 1)
BEGIN
	SELECT 
		issue_id, 
		issue_subject, 
		issue_category, 
		CONVERT(VARCHAR(10), create_date, 23) AS create_date, 
		CASE WHEN inquiry_status = 'P' THEN 'Pending' WHEN inquiry_status = 'C' THEN 'Closed' WHEN inquiry_status = 'R' THEN 'Replied' END AS inquiry_status 
		FROM inquiry_master 
		WHERE inquiry_status LIKE @status
	ORDER BY create_date, issue_id DESC
END
ELSE IF (@flag = 2)
BEGIN
	SELECT 
		issue_id, 
		issue_subject, 
		issue_category, 
		CONVERT(VARCHAR(10), create_date, 23) AS create_date, 
		CASE WHEN inquiry_status = 'P' THEN 'Pending' WHEN inquiry_status = 'C' THEN 'Closed' WHEN inquiry_status = 'R' THEN 'Replied' END AS inquiry_status 
		FROM inquiry_master 
		WHERE raise_person = @email AND inquiry_status LIKE @status
	ORDER BY create_date, issue_id DESC
END

GO

CREATE VIEW full_inquiry_client
AS
SELECT 
	a.issue_ID, 
	b.issue_subject, 
	b.issue_category, 
	b.raise_person, 
	a.reply_person, 
	CASE WHEN b.raise_person = a.reply_person THEN 'You' ELSE 'Staff' END + ' : ' + a.message_content AS message_content, 
	a.reply_date, 
	CASE WHEN b.inquiry_status = 'P' THEN 'Pending' WHEN b.inquiry_status = 'C' THEN 'Closed' WHEN b.inquiry_status = 'R' THEN 'Replied' END AS inquiry_status
FROM inquiry_detail a
INNER JOIN inquiry_master b ON a.issue_ID = b.issue_ID

GO

CREATE VIEW full_inquiry_staff
AS
SELECT 
	a.issue_ID, 
	b.issue_subject, 
	b.issue_category, 
	b.raise_person, 
	a.reply_person, 
	CASE WHEN b.raise_person = a.reply_person THEN 'Client' ELSE 'You' END + ' : ' + a.message_content AS message_content, 
	a.reply_date, 
	CASE WHEN b.inquiry_status = 'P' THEN 'Pending' WHEN b.inquiry_status = 'C' THEN 'Closed' WHEN b.inquiry_status = 'R' THEN 'Replied' END AS inquiry_status
FROM inquiry_detail a
INNER JOIN inquiry_master b ON a.issue_ID = b.issue_ID

GO

CREATE PROCEDURE sp_refresh_inquiry_detail @id nvarchar(50), @flag nvarchar(50)
AS
IF (@flag = 1)
BEGIN
	SELECT * FROM full_inquiry_staff WHERE issue_id = @id
END
ELSE IF (@flag = 2)
BEGIN
	SELECT * FROM full_inquiry_client WHERE issue_id = @id
END

GO

CREATE PROCEDURE sp_room_detail @room_id nvarchar(50)
AS
SELECT * FROM room WHERE room_id = @room_id

GO

CREATE PROCEDURE sp_booking @email nvarchar(50), @standard_room_amount nvarchar(50), @deluxe_room_amount nvarchar(50), @studio_room_amount nvarchar(50), @bed_type nvarchar(50), @check_in_date nvarchar(50), @check_out_date nvarchar(50), @price nvarchar(50), @remarks nvarchar(50), @credit_card nvarchar(50)
AS
INSERT INTO booking VALUES (@email, @standard_room_amount, @deluxe_room_amount, @studio_room_amount, @bed_type, @check_in_date, @check_out_date, @price, @remarks, @credit_card, GETDATE(), NULL)

GO

CREATE PROCEDURE sp_room_status @check_in_date nvarchar(50), @check_out_date nvarchar(50)
AS
SELECT
(SELECT CASE WHEN SUM(standard_room_amount) IS NULL THEN 0 ELSE SUM(standard_room_amount) END FROM
(SELECT DISTINCT * FROM
(SELECT booking_id, standard_room_amount FROM booking WHERE check_in_date BETWEEN @check_in_date AND @check_out_date
UNION ALL
SELECT booking_id, standard_room_amount FROM booking WHERE check_out_date BETWEEN @check_in_date AND @check_out_date) a) b) AS booked_standard, 
(SELECT amount_of_room FROM room WHERE room_id = 1) AS total_standard,
(SELECT CASE WHEN SUM(deluxe_room_amount) IS NULL THEN 0 ELSE SUM(deluxe_room_amount) END FROM
(SELECT DISTINCT * FROM
(SELECT booking_id, deluxe_room_amount FROM booking WHERE check_in_date BETWEEN @check_in_date AND @check_out_date
UNION ALL
SELECT booking_id, deluxe_room_amount FROM booking WHERE check_out_date BETWEEN @check_in_date AND @check_out_date) a) b) AS booked_deluxe,
(SELECT amount_of_room FROM room WHERE room_id = 2) AS total_deluxe,
(SELECT CASE WHEN SUM(studio_room_amount) IS NULL THEN 0 ELSE SUM(studio_room_amount) END FROM
(SELECT DISTINCT * FROM
(SELECT booking_id, studio_room_amount FROM booking WHERE check_in_date BETWEEN @check_in_date AND @check_out_date
UNION ALL
SELECT booking_id, studio_room_amount FROM booking WHERE check_out_date BETWEEN @check_in_date AND @check_out_date) a) b) AS booked_studio,
(SELECT amount_of_room FROM room WHERE room_id = 3) AS total_studio

GO

CREATE VIEW booking_history_master
AS
SELECT
	booking_id,
	booking_email,
	standard_room_amount + deluxe_room_amount + studio_room_amount AS total_room,
	CONVERT(VARCHAR(10), check_in_date, 23) AS check_in_date,
	CONVERT(VARCHAR(10), check_out_date, 23) AS check_out_date
FROM booking

GO

CREATE VIEW booking_history_detail
AS
SELECT
	booking_id,
	booking_email,
	standard_room_amount,
	deluxe_room_amount,
	studio_room_amount,
	bed_type,
	check_in_date AS check_in_date,
	check_out_date AS check_out_date,
	price,
	remarks,
	credit_card
FROM booking

GO

CREATE PROCEDURE sp_refresh_booking @email nvarchar(50), @flag nvarchar(50)
AS
IF (@flag = 1)
BEGIN
	SELECT * FROM booking_history_master WHERE booking_email = @email AND check_in_date >= CONVERT(DATE, GETDATE()) ORDER BY check_in_date
END
ELSE IF (@flag = 2)
BEGIN
	SELECT * FROM booking_history_master WHERE booking_email = @email ORDER BY check_in_date DESC
END
ELSE IF (@flag = 3)
BEGIN
	SELECT * FROM booking_history_master WHERE check_in_date >= CONVERT(DATE, GETDATE()) ORDER BY check_in_date
END
ELSE IF (@flag = 4)
BEGIN
	SELECT * FROM booking_history_master ORDER BY check_in_date DESC
END

GO

CREATE PROCEDURE sp_booking_detail @id nvarchar(50)
AS
SELECT * FROM booking_history_detail WHERE booking_id = @id

GO

CREATE PROCEDURE sp_update_booking @id nvarchar(50), @check_in_date nvarchar(50), @check_out_date nvarchar(50), @bed_type nvarchar(50), @standard_room_amount nvarchar(50), @deluxe_room_amount nvarchar(50), @studio_room_amount nvarchar(50), @price nvarchar(50), @credit_card nvarchar(50), @remarks nvarchar(50)
AS
UPDATE booking SET check_in_date = @check_in_date, check_out_date = @check_out_date, bed_type = @bed_type, standard_room_amount = @standard_room_amount, deluxe_room_amount = @deluxe_room_amount, studio_room_amount = @studio_room_amount, price = @price, credit_card = @credit_card, remarks = @remarks, update_time = GETDATE() WHERE booking_id = @id

GO